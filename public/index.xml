<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Algonotion</title>
    <link>https://algonotion.com/</link>
    <description>Recent content in Home on Algonotion</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 28 Jun 2025 08:14:09 +0530</lastBuildDate>
    <atom:link href="https://algonotion.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git workflow and git basics</title>
      <link>https://algonotion.com/posts/git-workflow-blog/</link>
      <pubDate>Sat, 28 Jun 2025 08:14:09 +0530</pubDate>
      <guid>https://algonotion.com/posts/git-workflow-blog/</guid>
      <description>&lt;p&gt;This is simple overview of the git workflow that I&amp;rsquo;ve been using for a while. This is by no means a fixed set of rules. I will be updating things over time as I incorporate new ideas and insights. This is to help set a basic convention that is easy to follow.&lt;/p&gt;&#xA;&lt;h2 id=&#34;workflow&#34;&gt;Workflow&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create the 2 branches dev and main or master&lt;/li&gt;&#xA;&lt;li&gt;Fork a feature branch from dev and start working on individual features&#xA;&lt;ul&gt;&#xA;&lt;li&gt;feature branches are usually names like &lt;code&gt;bugfix/token-expiry&lt;/code&gt;, &lt;code&gt;feature/login-api&lt;/code&gt; and etc, with the slash in some professional settings&lt;/li&gt;&#xA;&lt;li&gt;we use a letter from the name of the one working on it, plus descriptive word or two such as &lt;code&gt;pb-user-management&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;use &lt;code&gt;git checkout -b feature/my-task dev&lt;/code&gt; for branching&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;After feature is finished, sync with the latest dev code(if the dev was updated after I started working on the feature)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch origin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git merge origin/dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;After merging with latest dev and resolving conflicts, push to origin&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;If this is the first push after creating the feature branch, set the origin branch by creating it&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin feature/my-task&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;On github, open a Pull Request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;target the dev branch. Avoid main branch&lt;/li&gt;&#xA;&lt;li&gt;request code review&lt;/li&gt;&#xA;&lt;li&gt;add assignee&lt;/li&gt;&#xA;&lt;li&gt;add a good description for the PR&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;After review, use a regular merge(we usually don&amp;rsquo;t use rebase or squash-and-merge)&lt;/li&gt;&#xA;&lt;li&gt;After merge, delete the local branch and the branch on origin&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -d feature/my-task&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin --delete feature/my-task&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;commit-messages&#34;&gt;Commit messages&lt;/h2&gt;&#xA;&lt;h3 id=&#34;commit-types&#34;&gt;Commit types&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Type&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;feature&lt;/td&gt;&#xA;          &lt;td&gt;Adding new features&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;bugfix&lt;/td&gt;&#xA;          &lt;td&gt;Fixing bugs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;refactor&lt;/td&gt;&#xA;          &lt;td&gt;Code changes that neither fix bugs nor add features&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;docs&lt;/td&gt;&#xA;          &lt;td&gt;Documentation only&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;style&lt;/td&gt;&#xA;          &lt;td&gt;Formatting, indentation, naming, etc. (no logic changes)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;test&lt;/td&gt;&#xA;          &lt;td&gt;Adding or updating tests&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;chore&lt;/td&gt;&#xA;          &lt;td&gt;Non-user-facing changes (e.g., CI config, package updates)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;commit message format&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;short description&amp;gt;&#xA;&#xA;&amp;lt;optional longer body explaining the why or how&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example commit message 1:&lt;/p&gt;</description>
    </item>
    <item>
      <title>MongoDB vs. Mongoose: Which one to use on your Express JS project?</title>
      <link>https://algonotion.com/posts/mongodb_vs_mongoose/</link>
      <pubDate>Sat, 22 Mar 2025 13:01:09 +0530</pubDate>
      <guid>https://algonotion.com/posts/mongodb_vs_mongoose/</guid>
      <description>&lt;p&gt;Mongoose is an Object Data Modelling library made on top of the MongoDB native driver for Nodejs. While it&amp;rsquo;s lacking in terms of performance compared to using MongoDB directly, it allows developers to build applications faster.&lt;/p&gt;&#xA;&lt;p&gt;First of all, I need to clarify, MongoDB and MongoDB server are not the same. Here, MongoDB is referring to the &lt;code&gt;mongodb&lt;/code&gt; npm package. MongoDB server on the other hand is installed on the server, as a service.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Career Options for Math majors</title>
      <link>https://algonotion.com/posts/math_career_options/</link>
      <pubDate>Sat, 22 Mar 2025 12:54:35 +0530</pubDate>
      <guid>https://algonotion.com/posts/math_career_options/</guid>
      <description>&lt;p&gt;During my first year of university, I was really conflicted between majoring in physics vs mathematics. So, I ended up doing some research into the career options that maybe available after majoring in mathematics.&lt;/p&gt;&#xA;&lt;h2 id=&#34;different-career-paths&#34;&gt;Different career paths&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;research&lt;/li&gt;&#xA;&lt;li&gt;Mathematical physicist&lt;/li&gt;&#xA;&lt;li&gt;Data Analytics and data science&lt;/li&gt;&#xA;&lt;li&gt;machine learning (could be counted under data science)&lt;/li&gt;&#xA;&lt;li&gt;finance related fields&#xA;&lt;ul&gt;&#xA;&lt;li&gt;financial analyst&lt;/li&gt;&#xA;&lt;li&gt;actuary&lt;/li&gt;&#xA;&lt;li&gt;investment banker&lt;/li&gt;&#xA;&lt;li&gt;insurance&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;software engineering&lt;/li&gt;&#xA;&lt;li&gt;computer scientist&lt;/li&gt;&#xA;&lt;li&gt;Military/defense industry&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Military intelligence&lt;/li&gt;&#xA;&lt;li&gt;Combat engineer&lt;/li&gt;&#xA;&lt;li&gt;etc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Game development&lt;/li&gt;&#xA;&lt;li&gt;Oil/Gas/Power industry&lt;/li&gt;&#xA;&lt;li&gt;Computer engineering&lt;/li&gt;&#xA;&lt;li&gt;cyber security&lt;/li&gt;&#xA;&lt;li&gt;Predictive modeling&lt;/li&gt;&#xA;&lt;li&gt;hydrology&lt;/li&gt;&#xA;&lt;li&gt;Cryptography&lt;/li&gt;&#xA;&lt;li&gt;adjunct instructor&lt;/li&gt;&#xA;&lt;li&gt;Algorithm optimization/development&lt;/li&gt;&#xA;&lt;li&gt;operations research analyst&lt;/li&gt;&#xA;&lt;li&gt;Engineering jobs&lt;/li&gt;&#xA;&lt;li&gt;pilot&lt;/li&gt;&#xA;&lt;li&gt;Operations Research&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;It is important to note that these are not garanteed career options. Some of them may require further qualifications. Use this list as a starting point to do your own research.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://algonotion.com/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://algonotion.com/pages/about/</guid>
      <description>&lt;p&gt;This is a personal blog about topics that interest me. I usually cover topics that I&amp;rsquo;m learning or something that I have learnt in the past. The purpose of writing this is to mainly help me find gaps in my knowledge while also sharing knowledge with others who are interested in such topics.&lt;/p&gt;&#xA;&lt;p&gt;The topics I cover ranges over from Mathematics, Physics, Programming, Electronics and to Embedded systems. I may even cover other topics that I find interesting.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
